{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","setOptions","breaks","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","initialInput","handleChange","bind","assertThisInitialized","event","document","getElementById","innerHTML","target","value","setState","react_default","a","createElement","id","App_Markdown","App_Preview","Component","Markdown","className","onChange","Preview","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAIAA,IAAOC,WAAW,CAChBC,QAAQ,QAGJC,cACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAOC,GAEXT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KALFA,4EAQLa,GACXC,SAASC,eAAe,WAAWC,UACjCrB,IAAOkB,EAAMI,OAAOC,OACtBf,KAAKgB,SAAS,CACZX,MAAOK,EAAMI,OAAOC,oDAKtBJ,SAASC,eAAe,WAAWC,UACjCrB,IAAOQ,KAAKI,MAAMC,wCAIpB,OACEY,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OACNH,EAAAC,EAAAC,cAACE,EAAD,CAAUhB,MAAOL,KAAKI,MAAMC,MAAOE,aAAcP,KAAKO,eACtDU,EAAAC,EAAAC,cAACG,EAAD,cA1BUC,aAgCZC,EAAW,SAAC5B,GAChB,OACEqB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,WACbR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,WAAd,YACAR,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YACNH,EAAAC,EAAAC,cAAA,YAAUC,GAAG,SAASL,MAAOnB,EAAMS,MAAOqB,SAAU9B,EAAMW,kBAM5DoB,EAAU,SAAC/B,GACf,OACEqB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,WACbR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,WAAd,WACAR,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cAKRd,EAAe,sXAGNX,ICnDKiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASxB,SAASC,eAAe,SD2H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4bd065e9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport marked from 'marked';\n\nmarked.setOptions({\n  breaks: true\n});\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      input: initialInput\n    };\n  this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    document.getElementById('preview').innerHTML =\n      marked(event.target.value);\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  componentDidMount() {\n    document.getElementById('preview').innerHTML =\n      marked(this.state.input);\n  }\n\n  render() {\n    return (\n      <div id=\"App\">\n        <Markdown input={this.state.input} handleChange={this.handleChange}/>\n        <Preview />\n      </div>\n    );\n  }\n}\n\nconst Markdown = (props) => {\n  return (\n    <div className=\"wrapper\">\n      <h1 className=\"heading\">Markdown</h1>\n      <div id=\"markdown\">\n        <textarea id=\"editor\" value={props.input} onChange={props.handleChange}/>\n      </div>\n    </div>\n  );\n}\n\nconst Preview = (props) => {\n  return (\n    <div className=\"wrapper\">\n      <h1 className=\"heading\">Preview</h1>\n      <div id=\"preview\" />\n    </div>\n  );\n}\n\nconst initialInput = '# Heading\\n## Sub-heading\\n----\\n- link: [google](https://www.google.com/)\\n- inline code: `<html />`\\n- code block:\\n```\\nfor(let i=0; i<n; i++) {\\n    //do stuff\\n}\\n```\\n- blockquote:\\n> \"The crows seemed to be calling his name, thought Caw.\"\\n-bolded text: **strong**\\n- image:\\n![markdown-image](https://cdn-images-1.medium.com/max/1200/1*G0YcQMGtG6jWgq6xIQ1BnQ.png)';\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}